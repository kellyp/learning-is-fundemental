Git Down On It
10 Feb 2015
Tags: git fun

Kelly Plummer

kelly.plummer@nike.com
kelly@dualspark.com

* Git Background

Distrubuted Version Control

- fully mirrored repo exists locally
- built in backups
- multiple remote repos

* Git History

- before 2002 Linux was developed using patches and archive files
- 2002 - 2005 started using proprietary DVCS Bitkeeper
- 2005 Bitkeeper revokes free of charge status
- 2005 Git project started as response with lessons learned

* Git Goals

- Speed
- Simple design
- Strong support for non-linear development (thousands of parallel branches)
- Fully distributed
- Able to handle large projects like the Linux kernel efficiently (speed and data size)

* Git Inside

- Stream of Snapshots
- Local
- Integrity

* Git States
- Three States of Git
- Commited - Stored in your local DB
- Modified - Modifications waiting to be committed
- Staged - Marked a modified file to be included in the next commit

* Git Command
- Fully operational git
- GUIs vary in feature support
- Strongly recommended

* Git Graphing
.image images/log.png


* Git Going
.link http://git-scm.com/video/get-going http://git-scm.com/video/get-going (4:26)

* Git Links
.link http://git-scm.com/docs/gittutorial http://git-scm.com/docs/gittutorial
.link http://think-like-a-git.net http://think-like-a-git.net
.link https://www.atlassian.com/git/ https://www.atlassian.com/git/
.link http://git-scm.com/video/get-going http://git-scm.com/video/get-going

* Stash

* Stash Basics
- Centralized storage
- Management of repos
- User friendly repo views
- Project organizational management

* Stash Pull requests
- View Diffs
- Lightweight code review
- Commenting
- Approvals

* Stash Links

- Pull requests
.link https://confluence.atlassian.com/display/STASH/Using+pull+requests+in+Stash
.link https://www.youtube.com/watch?x-yt-ts=1422579428&x-yt-cl=85114404&feature=player_detailpage&v=QWS2yXehCNk#t=1046
.link https://www.youtube.com/watch?x-yt-ts=1422579428&feature=player_detailpage&x-yt-cl=85114404&v=KsIessdQ6GI#t=329

- Key management
.link https://confluence.atlassian.com/display/STASH/Creating+SSH+keys
.link https://confluence.atlassian.com/display/STASH/SSH+user+keys+for+personal+use

* Branching Strategies

* Gitflow
*  
.image images/gitflow.png

* Gitflow for a Lifetime Branches
- master - production ready
- develop - reflects the latest development changes

* Gitflow Best Supporting Branches
- Feature branches
- Release branches
- Hotfix branches

* Gitflow Feature Branches
- branched from develop
- merged into develop
- named feature/*
- exists only as long a feature is in dev

* Gitflow Feature Branches flow
  $ git checkout -b feature/new-hotness develop
  ...
  $ git commit -m "awesome new feature" -a
  ...
  $ git checkout develop
  Switched to branch 'develop'
  $ git merge --no-ff feature/new-hotness
  Updating ea1b82a..05e9557
  (Summary of changes)
  $ git branch -d feature/new-hotness
  Deleted branch feature/new-hotness (was 05e9557).
  $ git push origin develop

* Gitflow Release Branches
- branch from develop
- merge into develop and master
- named release-*
- exists for metadata (versioning, dates) preparing for a release
- version is assigned at release branch creation only

* Gitflow Release Branches flow
  $ git checkout -b release-x.y develop
  ...
  $ git checkout master
  Switched to branch 'master'
  $ git merge --no-ff release-x.y
  Merge made by recursive.
  (Summary of changes)
  $ git tag -a x.y

* Gitflow Hotfix
- branch for master or release-x.y
- merge into develop and master
- named hotfix-x.y.z
- similar to release branches but unplanned

* Gitflow Hotfix Branches flow
  $ git checkout -b hotfix-x.y.z master
  ...
  $ git commit -m "critical patch" -a
  ...
  $ git checkout master
  Switched to branch 'master'
  $ git merge --no-ff hotfix-x.y.z
  Merge made by recursive.
  (Summary of changes)
  $ git tag -a x.y.z

* Gitflow links

.link http://nvie.com/posts/a-successful-git-branching-model/ http://nvie.com/posts/a-successful-git-branching-model/
.link https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow

* Github flow
*  

.image images/githubflow.png

* Github flow deep dive
- master = production
- versioning is less important because of constant deployment
- little bugs, roll forward, blah blah blah
- same process for new features and security issues

* Github flow steps
1. create descriptively named branch from master
2. create pull request for branch when feature is complete
3. deploy feature

* Github flow links

.link https://guides.github.com/introduction/flow/index.html https://guides.github.com/introduction/flow/index.html
.link http://scottchacon.com/2011/08/31/github-flow.html http://scottchacon.com/2011/08/31/github-flow.html

* Thank You!
